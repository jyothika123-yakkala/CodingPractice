--------------------------------------BruteForce--------------------------------------------------------
#include<iostream>
#include<unordered_set>
using namespace std;

int MaximumLength(string name) {
    int n = name.length();
    int maxi = 0;

    for (int i = 0; i < n; i++) {
        unordered_set<char> s;
        for (int j = i; j < n; j++) {
            if (s.find(name[j]) == s.end()) {
                s.insert(name[j]);
                maxi = max(maxi, j - i + 1);
            } else {
                break;  // exit the inner loop if a repeating character is found
            }
        }
    }

    return maxi;
}

int main() {
    string name;
    cin >> name;
    cout << "Maximum length without repeating characters is: " << MaximumLength(name);
    return 0;
}
TimeComplexity=O(N^2)
-----------------------------------------------Intermidiate Approach using set------------------------------------
#include<iostream>
#include<bits/stdc++.h>
using namespace std;

int MaximumLength(string name) {
    int n = name.length();
    int maxi = 0;
    int left = 0;
    int right = 0;
    set<char> s;

    while (right < n) {
        if (s.find(name[right]) == s.end()) {
            s.insert(name[right]);
            maxi = max(maxi, right - left + 1);
            right++;
        } else {
            while (left < right) {
                s.erase(name[left]);
                if (s.find(name[left]) != s.end()) {
                    left++;
                } else {
                    break;
                }
            }
        }
    }

    return maxi;
}

int main() {
    string name;
    cin >> name;
    cout << "Maximum length without repeating characters is: " << MaximumLength(name);
    return 0;
}
Time Complexity=O(2N)
------------------------------------------optimalApproach-----------------------------------------------
#include<iostream>
#include<bits/stdc++.h>
using namespace std;

int MaximumLength(string name) {
    int n = name.length();
    int maxi = 0;
    int left = 0;
    int right = 0;
    map<char, int> s;

    while (right < n) {
        if (s.find(name[right]) == s.end()) {
            s[name[right]] = right;
            maxi = max(maxi, right - left + 1);
            right++;
        } else {
            left = s[name[right]] + 1;  // Corrected this line
            s[name[right]] = right;
            right++;
        }
    }

    return maxi;
}

int main() {
    string name;
    cin >> name;
    cout << "Maximum length without repeating characters is: " << MaximumLength(name);
    return 0;
}
Time Complexity:O(N).

